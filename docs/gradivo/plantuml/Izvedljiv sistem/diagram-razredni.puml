@startuml
abstract class BaseManager <<abstract>> {
    # logger: Logger
    # hass: HomeAssistant
    # store: Store
    # data: Any
    - services: list
    + __init__(module_name: str, hass: HomeAssistant, store_key: str, data_default: Any): None
    + __del__(): None
    # initialize(): None
    - register_services(): None
    - unregister_services(): None
}

class GroupManager <<manager>> <<singleton>> {
    - instance: GroupManager
    + __init__(hass: HomeAssistant)
    + get_instance(hass: HomeAssistant): Coroutine[Any, Any, GroupManager]
    + destroy(): None
    + add_person(call: ServiceCall): Coroutine[Any, Any, None]
    + remove_person(call: ServiceCall): Coroutine[Any, Any, None]
    - publish_state_changed(members: set): None
}
BaseManager <|-- GroupManager

class DeviceManager <<manager>> <<singleton>> {
    - instance: DeviceManager
    + __init__(hass: HomeAssistant)
    + get_instance(hass: HomeAssistant): Coroutine[Any, Any, DeviceManager]
    + destroy(): None
    + add_light_device(call: ServiceCall): Coroutine[Any, Any, None]
    + add_media_device(call: ServiceCall): Coroutine[Any, Any, None]
    + remove_device(call: ServiceCall): Coroutine[Any, Any, None]
    + enable_device(call: ServiceCall): Coroutine[Any, Any, None]
    + disable_device(call: ServiceCall): Coroutine[Any, Any, None]
    + choose_radio_station(call: ServiceCall): Coroutine[Any, Any, None]
    + control_device(device_id: str, command: str): Coroutine[Any, Any, None]
}
BaseManager <|-- DeviceManager

class StateManager <<manager>> <<singleton>> {
    - instance: StateManager
    - state: State
    - presence_simulation_duration_minutes: int
    - presence_simulation_timer: Task
    - presence_simulation_stop_event: Event
    - mqtt_frigate_subscription: Callable[[], None] | None
    + __init__(hass: HomeAssistant): None
    + get_instance(hass: HomeAssistant): Coroutine[Any, Any, StateManager]
    + destroy(): None
    + set_state_idle(call: ServiceCall): Coroutine[Any, Any, None]
    + set_state_ready(call: ServiceCall): Coroutine[Any, Any, None]
    + set_state_active(call: ServiceCall): Coroutine[Any, Any, None]
    - start_presence_simulation(): None
    - stop_presence_simulation(): None
    - turn_off_all_devices(): Coroutine[Any, Any, None]
    - presence_simulation_task(): Coroutine[Any, Any, None]
    - presence_simulation(): Coroutine[Any, Any, None]
    - wait_or_stop(delay: float): Coroutine[Any, Any, bool]
    - setup_mqtt(): Coroutine[Any, Any, None]
    - handle_person_detection(msg: ReceiveMessage): Coroutine[Any, Any, None]
    - clear_mqtt(): None
    - send_notification(message: str): Coroutine[Any, Any, None]
}
BaseManager <|-- StateManager
StateManager "1" *-- "1" State : has >

abstract class State <<abstract>> {
    # _manager: StateManager
    + __init__(manager: StateManager): None
    + {abstract} set_state_idle(): Coroutine[Any, Any, None]
    + {abstract} set_state_ready(): Coroutine[Any, Any, None]
    + {abstract} set_state_active(): Coroutine[Any, Any, None]
}

class IdleState <<state>> {
    + set_state_idle(): Coroutine[Any, Any, None]
    + set_state_ready(): Coroutine[Any, Any, None]
    + set_state_active(): Coroutine[Any, Any, None]
}
State <|-- IdleState

class ReadyState <<state>> {
    + set_state_idle(): Coroutine[Any, Any, None]
    + set_state_ready(): Coroutine[Any, Any, None]
    + set_state_active(): Coroutine[Any, Any, None]
}
State <|-- ReadyState

class ActiveState <<state>> {
    + set_state_idle(): Coroutine[Any, Any, None]
    + set_state_ready(): Coroutine[Any, Any, None]
    + set_state_active(): Coroutine[Any, Any, None]
}
State <|-- ActiveState

class ZoneManager <<manager>> <<singleton>> {
    - instance: ZoneManager
    - group_tracker: Callable[[], None] | None
    - device_trackers: list[Callable]
    - device_entities: list[str]
    + __init__(hass: HomeAssistant)
    + get_instance(hass: HomeAssistant): Coroutine[Any, Any, ZoneManager]
    + destroy(): None
    + select_activation_zone(call: ServiceCall): Coroutine[Any, Any, None]
    - setup_group_tracker(): Coroutine[Any, Any, None]
    - setup_device_trackers(): Coroutine[Any, Any, None]
    - clear_device_trackers(): None
    - clear_group_tracker(): None
    - handle_group_state_change(event: Event): Coroutine[Any, Any, None]
    - handle_zone_device_state_change(event: Event): Coroutine[Any, Any, None]
    - check_presence_in_zone(zone_entity_id: str, tracking_entities: list[str]): Coroutine[Any, Any, None]
}
BaseManager <|-- ZoneManager

class RadioBrowserAPI <<control>> <<singleton>> {
    - instance: RadioBrowserAPI
    - base_urls: list[str]
    - session: ClientSession | None
    + __init__(hass: HomeAssistant)
    + get_instance(hass: HomeAssistant): Coroutine[Any, Any, RadioBrowserAPI]
    + destroy(): Coroutine[Any, Any, None]
    + get_station_uuid(name: str, countrycode: str): Coroutine[Any, Any, Optional[str]]
    + get_list_of_stations_per_country(call: ServiceCall): Coroutine[Any, Any, List[str]]
    - setup(): Coroutine[Any, Any, None]
    - cleanup(): Coroutine[Any, Any, None]
    - get_radiobrowser_base_urls(): Coroutine[Any, Any, List[str]]
    - fetch_json(url: str, params: Optional[Dict]): Coroutine[Any, Any, Union[Dict, List]]
}
BaseManager <|-- RadioBrowserAPI

class VarkoLight <<entity>> {
    - state: bool
    - attr_has_entity_name: bool
    - attr_supported_color_modes: set[ColorMode]
    - attr_color_mode: ColorMode
    - hass: HomeAssistant
    - attr_name: str
    - attr_unique_id: str
    - attr_config_entry_id: str
    - command_topic: str
    - state_topic: str
    + is_on: bool
    + unique_id: str | None
    
    + __init__(hass: HomeAssistant, name: str, device_id: str, config_entry_id: str): None
    + async_turn_on(): Coroutine[Any, Any, None]
    + async_turn_off(): Coroutine[Any, Any, None]
    + async_added_to_hass(): Coroutine[Any, Any, None]
}
DeviceManager "1" *-- "*" VarkoLight : manages >
@enduml